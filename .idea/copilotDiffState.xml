<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# playwright-mcp-demo" />
              <option name="updatedContent" value="# playwright-mcp-demo&#10;&#10;This project contains Playwright end-to-end tests for the [Sauce Demo](https://www.saucedemo.com/v1/) web application.&#10;&#10;## Project Structure&#10;- `tests/` - Main test suite for Sauce Demo features&#10;  - `saucedemo-cart-total.spec.ts`: Validates cart total matches sum of product prices&#10;  - `saucedemo-grid-items.spec.ts`: Validates grid items against expected JSON data&#10;  - `saucedemo-sidebar-items.spec.ts`: Validates sidebar menu items after login&#10;- `resources/` - Test data and expected results&#10;  - `expected-grid-items.json`: Reference data for grid item validation&#10;- `playwright.config.ts` - Playwright configuration&#10;- `playwright-report/` - Test run reports&#10;- `test-results/` - Raw test results&#10;&#10;## Getting Started&#10;1. Install dependencies:&#10;   ```bash&#10;   npm install&#10;   ```&#10;2. Run all tests:&#10;   ```bash&#10;   npx playwright test&#10;   ```&#10;3. View test reports:&#10;   ```bash&#10;   npx playwright show-report&#10;   ```&#10;&#10;## Example Test Scenarios&#10;- **Login and Cart Validation:**&#10;  - Logs in with demo credentials&#10;  - Adds random items to cart&#10;  - Checks that cart total matches sum of item prices&#10;- **Grid Item Validation:**&#10;  - Compares grid items on the page to expected data from JSON&#10;  - Ignores order of items&#10;- **Sidebar Validation:**&#10;  - Checks sidebar menu items after login&#10;&#10;## Credentials&#10;Use the following demo credentials for Sauce Demo:&#10;- Username: `standard_user`&#10;- Password: `secret_sauce`&#10;&#10;## Resources&#10;- [Playwright Documentation](https://playwright.dev/)&#10;- [Sauce Demo](https://www.saucedemo.com/v1/)&#10;&#10;---&#10;Feel free to add more tests or update expected data in the `resources/` folder." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/saucedemo-grid-items.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/saucedemo-grid-items.spec.ts" />
              <option name="originalContent" value="import { test, expect } from '@playwright/test';&#10;import * as fs from 'fs';&#10;import * as path from 'path';&#10;&#10;type GridItemDto = {&#10;  name: string;&#10;  desc: string;&#10;  price: string;&#10;};&#10;&#10;test('Validate grid items against expected JSON', async ({ page }) =&gt; {&#10;  // Load expected data&#10;  const expected: GridItemDto[] = JSON.parse(&#10;    fs.readFileSync(path.resolve(__dirname, '../resources/expected-grid-items.json'), 'utf-8')&#10;  );&#10;&#10;  // Go to login page&#10;  await page.goto('https://www.saucedemo.com/v1/');&#10;&#10;  // Login (using standard credentials)&#10;  await page.fill('#user-name', 'standard_user');&#10;  await page.fill('#password', 'secret_sauce');&#10;  await page.click('#login-button');&#10;&#10;  // Wait for grid to appear&#10;  await page.waitForSelector('.inventory_list');&#10;&#10;  // Get all grid items and parse to DTOs&#10;  const items = await page.$$('.inventory_item');&#10;  expect(items.length).toBe(expected.length);&#10;&#10;  const actual: GridItemDto[] = [];&#10;  for (const item of items) {&#10;    const name = await item.$eval('.inventory_item_name', el =&gt; el.textContent?.trim());&#10;    const desc = await item.$eval('.inventory_item_desc', el =&gt; el.textContent?.trim());&#10;    const price = await item.$eval('.inventory_item_price', el =&gt; el.textContent?.trim());&#10;    actual.push({ name, desc, price });&#10;  }&#10;&#10;  expect(actual).toEqual(expected);&#10;});&#10;" />
              <option name="updatedContent" value="import { test, expect } from '@playwright/test';&#10;import * as fs from 'fs';&#10;import * as path from 'path';&#10;&#10;class GridItemDto {&#10;  name: string;&#10;  desc: string;&#10;  price: string;&#10;&#10;  constructor(name: string, desc: string, price: string) {&#10;    this.name = name;&#10;    this.desc = desc;&#10;    this.price = price;&#10;  }&#10;&#10;  static from(obj: any): GridItemDto {&#10;    return new GridItemDto(obj.name, obj.desc, obj.price);&#10;  }&#10;}&#10;&#10;test('Validate grid items against expected JSON', async ({ page }) =&gt; {&#10;  // Load expected data&#10;  const expectedRaw = JSON.parse(&#10;    fs.readFileSync(path.resolve(__dirname, '../resources/expected-grid-items.json'), 'utf-8')&#10;  );&#10;  const expected: GridItemDto[] = expectedRaw.map((item: any) =&gt; GridItemDto.from(item));&#10;&#10;  // Go to login page&#10;  await page.goto('https://www.saucedemo.com/v1/');&#10;&#10;  // Login (using standard credentials)&#10;  await page.fill('#user-name', 'standard_user');&#10;  await page.fill('#password', 'secret_sauce');&#10;  await page.click('#login-button');&#10;&#10;  // Wait for grid to appear&#10;  await page.waitForSelector('.inventory_list');&#10;&#10;  // Get all grid items and parse to DTOs&#10;  const items = await page.$$('.inventory_item');&#10;  expect(items.length).toBe(expected.length);&#10;&#10;  const actual: GridItemDto[] = [];&#10;  for (const item of items) {&#10;    const name = await item.$eval('.inventory_item_name', el =&gt; el.textContent?.trim());&#10;    const desc = await item.$eval('.inventory_item_desc', el =&gt; el.textContent?.trim());&#10;    const price = await item.$eval('.inventory_item_price', el =&gt; el.textContent?.trim());&#10;    actual.push(new GridItemDto(name || '', desc || '', price || ''));&#10;  }&#10;&#10;  // Compare lists regardless of order&#10;  const sortFn = (a: GridItemDto, b: GridItemDto) =&gt;&#10;    a.name.localeCompare(b.name) || a.desc.localeCompare(b.desc) || a.price.localeCompare(b.price);&#10;  const expectedSorted = [...expected].sort(sortFn);&#10;  const actualSorted = [...actual].sort(sortFn);&#10;&#10;  expect(actualSorted).toEqual(expectedSorted);&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/saucedemo-sidebar-items.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/saucedemo-sidebar-items.spec.ts" />
              <option name="updatedContent" value="import { test, expect } from '@playwright/test';&#10;&#10;test('Validate sidebar items on saucedemo', async ({ page }) =&gt; {&#10;  // Navigate to the site&#10;  await page.goto('https://www.saucedemo.com/v1/');&#10;&#10;  // Login&#10;  await page.fill('#user-name', 'standard_user');&#10;  await page.fill('#password', 'secret_sauce');&#10;  await page.click('#login-button');&#10;&#10;  // Open sidebar&#10;  await page.click('#menu_button');&#10;&#10;  // Validate sidebar items&#10;  const sidebarItems = await page.$$eval('.bm-item-list a', items =&gt; items.map(i =&gt; i.textContent?.trim()));&#10;  expect(sidebarItems).toEqual([&#10;    'ALL ITEMS',&#10;    'ABOUT',&#10;    'LOGOUT',&#10;    'RESET APP STATE'&#10;  ]);&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>